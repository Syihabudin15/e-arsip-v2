// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum StatusAction {
  PENDING
  APPROVED
  REJECTED
}

enum ENeedAction {
  DOWNLOAD
  DELETE
}

enum EProdukType {
  TABUNGAN
  DEPOSITO
  KREDIT
}

model Role {
  id         Int    @id @default(autoincrement())
  roleName   String @unique
  permission String @db.Text

  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User[]
}

model User {
  id       Int     @id @default(autoincrement())
  fullname String
  username String  @unique
  password String
  email    String
  photo    String?

  status     Boolean            @default(true)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now())
  role       Role               @relation(fields: [roleId], references: [id])
  roleId     Int
  Logs       Logs[]
  ReuestMade PermohonanAction[] @relation("RequesterRelation")
  ApprovMade PermohonanAction[] @relation("ApproverRelation")
  Permohonan Permohonan[]

  @@index([roleId])
}

model JenisPemohon {
  id         Int    @id @default(autoincrement())
  name       String @unique
  keterangan String @db.Text

  status    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Pemohon   Pemohon[]
}

model Pemohon {
  id             Int          @id @default(autoincrement())
  fullname       String
  NIK            String?
  accountNumber  String       @unique
  JenisPemohon   JenisPemohon @relation(fields: [jenisPemohonId], references: [id])
  jenisPemohonId Int
  Permohonan     Permohonan[]

  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Produk {
  id         Int         @id @default(autoincrement())
  code       String      @unique
  name       String
  produkType EProdukType

  status     Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  Permohonan Permohonan[]
}

model Permohonan {
  id          Int     @id @default(autoincrement())
  purposeUse  String?
  description String? @db.Text
  activity    String? @db.Text

  status           Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  User             User               @relation(fields: [userId], references: [id])
  PermohonanAction PermohonanAction[]
  Files            Files[]
  Pemohon          Pemohon            @relation(fields: [pemohonId], references: [id])
  Produk           Produk             @relation(fields: [produkId], references: [id])
  userId           Int
  pemohonId        Int
  produkId         Int

  @@index([produkId])
  @@index([pemohonId])
  @@index([createdAt])
  @@index([userId])
}

model RootFiles {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  order        Int?        @default(1)
  produkType   EProdukType
  resourceType String

  Files Files[]
}

model Files {
  id            Int    @id @default(autoincrement())
  name          String
  url           String
  allowDownload String @db.Text

  createdAt   DateTime    @default(now())
  RootFiles   RootFiles   @relation(fields: [rootFilesId], references: [id])
  rootFilesId Int
  Permohonan  Permohonan? @relation(fields: [permohonanId], references: [id])

  PermohonanAction PermohonanAction[]
  permohonanId     Int?
}

model PermohonanAction {
  id           Int          @id @default(autoincrement())
  statusAction StatusAction @default(PENDING)
  description  String?      @db.Text
  action       ENeedAction

  status     Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  Requester  User       @relation("RequesterRelation", fields: [requesterId], references: [id])
  Approver   User?      @relation("ApproverRelation", fields: [approverId], references: [id])
  Permohonan Permohonan @relation(fields: [permohonanId], references: [id])

  Files Files[] // banyak Files

  requesterId  Int
  approverId   Int?
  permohonanId Int

  @@index([requesterId])
  @@index([approverId])
  @@index([permohonanId])
}

model Logs {
  id           Int     @id @default(autoincrement())
  name         String
  method       String
  table        String
  path         String
  serverIP     String
  userAgent    String?
  returnStatus String
  detail       String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@index([userId])
  @@index([createdAt])
}
